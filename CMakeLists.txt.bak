cmake_minimum_required(VERSION 3.0)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
project( video_analysis )

set(CMAKE_BUILD_TYPE "Release")

set(OpenCV_DIR "E:\\intelswtool\\openvino_2020.1.033\\opencv\\cmake")
set(CMAKE_PREFIX_PATH "E:\\workspace\\daka\\libtorch-win-shared-with-deps-1.4.0\\libtorch")
set(InferenceEngine_DIR "E:\\intelswtool\\openvino_2020.1.033\\deployment_tools\\inference_engine\\share")

set_property (DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS _CRT_SECURE_NO_WARNINGS)
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_SCL_SECURE_NO_WARNINGS -DNOMINMAX")
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc") #no asynchronous structured exception handling
set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE")
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4251 /wd4275 /wd4267") #disable some warnings

if(NOT ONNXRUNTIME_ROOTDIR)
  if(WIN32)
    set(ONNXRUNTIME_ROOTDIR "E:\\workspace\\daka\\onnxruntime_RelWithDebInfo")
  else()
    include_directories("/usr/local/include/onnxruntime")
  endif()
endif()

if(WIN32)
  include_directories("${ONNXRUNTIME_ROOTDIR}/include" "${ONNXRUNTIME_ROOTDIR}/include/onnxruntime/core/session")
  link_directories("${ONNXRUNTIME_ROOTDIR}/lib")
endif()


# The following code block is suggested to be used on Windows.
# According to https://github.com/pytorch/pytorch/issues/25457,
# the DLLs need to be copied to avoid memory errors.
if (MSVC)
  file(GLOB TORCH_DLLS "${TORCH_INSTALL_PREFIX}/lib/*.dll")
  add_custom_command(TARGET example-app
                     POST_BUILD
                     COMMAND ${CMAKE_COMMAND} -E copy_if_different
                     ${TORCH_DLLS}
                     $<TARGET_FILE_DIR:example-app>)
endif (MSVC)





find_package(InferenceEngine REQUIRED)
find_package(OpenCV REQUIRED)
find_package(Torch REQUIRED)
include_directories("E:\\workspace\\daka\\libtorch-win-shared-with-deps-1.4.0\\libtorch\\include")

add_executable( video-analysis video-analysis.cpp )
target_link_libraries( video-analysis ${OpenCV_LIBS})
target_link_libraries( video-analysis ${TORCH_LIBRARIES})

message(STATUS "Pytorch status:")
message(STATUS "    libraries: ${TORCH_LIBRARIES}")

message(STATUS "OpenCV library status:")
message(STATUS "    version: ${OpenCV_VERSION}")
message(STATUS "    libraries: ${OpenCV_LIBS}")
message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")

message(STATUS "OpenVINO status")
message(STATUS "    version: ${InferenceEngine_VERSION}")
message(STATUS "    libraries: ${InferenceEngine_LIBRARIES}")

#add_definitions(-D_DEBUG)
#add_definitions(-D_FOO_TEST)
add_definitions(-D_TIMING)

set(IE_MAIN_SAMPLES_DIR ${CMAKE_CURRENT_BINARY_DIR})
add_executable( speed-bench speed-bench.cpp )
target_link_libraries( speed-bench ${OpenCV_LIBS} )
target_link_libraries( speed-bench ${TORCH_LIBRARIES})
target_link_libraries( speed-bench ${InferenceEngine_LIBRARIES})
#target_link_libraries( speed-bench "/Users/liangruofan1/Program/CNN_Deployment/onnxruntime-osx-x64-1.1.2/lib/libonnxruntime.1.1.2.dylib")
set_target_properties( speed-bench PROPERTIES COMPILE_PDB_NAME speed-bench)

#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ldl -pthread -fPIC -ltvm_runtime")